import stores from '../../redux/nomenklator/store';
import * as glob        from '../../jslib/constants'
import axiosProc        from '../../axios'

class {
    onCreate(input, out) {
    }

    onInput(input, out) {
      this.state = { count: 0, overlayVisible: false };
    }

    onMount() {

        this.inpArtikul       = this.getEl('inpArtikul');
        this.catalogHeader    = this.getEl('catalogHeader');
        this.catalogHeader2   = this.getEl('catalogHeader2');

        this.artikulHistory = [];

        stores.storeNomenklator.subscribe(() => { this.forceUpdate(); } );
        stores.storeFoundedNomenklator.subscribe(() => { this.forceUpdate(); } );

        const guidParent = this.input.guidParent || '';

        stores.storeNomenklator.dispatch( axiosProc.getNumenklator(guidParent, '') );

        //
        this.winSize = glob.getWinSize();
        //const currEl = jQuery('#44444');
        // const currEl = jQuery(this.getEl('44444')).height('250px');
        // console.log( 'currEl ', currEl );

    }

    onUpdate() {

      const heightHeader = jQuery(this.catalogHeader).height()  + 10 + 'px';

      jQuery(this.catalogHeader2).height( heightHeader );

      if ( this.artikulHistory.length>0) {
        this.inpArtikul.value = this.artikulHistory[ this.artikulHistory.length - 1 ];
      }

    }

    openModal( artikul='' ) {
      //alert('hi');
      //this.state.count++;

      const inpArt = this.inpArtikul.value;

      if (inpArt !== '') {

          this.artikulHistory.push( inpArt );

          stores.storeFoundedNomenklator.dispatch( axiosProc.getFoundedNumenklator( inpArt ) );
      }
      //console.log( 'inpArtikul ', this.inpArtikul.value );
      this.getComponent('overlay').show();
    }

    cleanFilter() {
      stores.storeFoundedNomenklator.dispatch( { type: 'PUT_AXIOS_AHTUNG' } );
    }

    handleOverlayShow() {
      console.log('55555555555555555555555555555555555555');
    }

    handleOverlayHide() {
      console.log('55555555555555555555555555555555555555');
    }

    handleOverlayOk() {
      console.log('999999999999999999999999999999999999999');
    }
}

style {
}

//$ console.log( input );
$ const attrs = stores.storeNomenklator.getState();
$ const rec0 = attrs.recs && attrs.recs.length>0 && attrs.recs[0] || false;
$ const headerText = rec0 && rec0.level_group>1||rec0.level_group==0 ? rec0.nameparent0 : 'Go home...';

$ const attrsFoundedNomenklator = stores.storeFoundedNomenklator.getState();
//$ console.log( attrsFoundedNomenklator );

$ const whGroup       = component&&component.winSize&&component.winSize.width/2-150 + 'px'||'150px';
static const whGood   = '250px';

//$ { () => {console.log( try {component.winWidth/2-50} catch(e) {'350px'}}  )}

//${ console.log( component&&component.winWidth/2-50||'nothing' ) };

<!-- ////////////////////////////////////////////////// -->
<div class='position: relative;'>

    <modal-win
         onOk("handleOverlayOk")
         onCancel("handleOverlayCancel")
         onHide("handleOverlayHide")
         onShow("handleOverlayShow")
         key="overlay"
         visible = state.overlayVisible>

         <h1 style='text-align: center;'>Найденные позиции</h1>

         <if(attrsFoundedNomenklator.recs.length > 0)>
           <!-- <div style='max-height: 70vh; overflow-y: scroll; display: flex; flex-direction: column; position: absolute; font-size: 3rem; width: 80vw; background-color: white; color: black; border: 1px solid black; right: 10px; top: 120px;'> -->

             <for|value| of=attrsFoundedNomenklator.recs>
                 <p on-click('cleanFilter') style='text-align: left; font-size: 3rem; border-bottom: 2px solid black; padding-left: 30px; padding-right: 30px; '>${value.name}</p>
             </for>

           <!-- </div> -->
         </if>

    </modal-win>

  <headerName name=`${ headerText }` path=`${ rec0 && rec0.level_group>1||rec0.level_group==0 ? rec0.pathparent0 : '/' }` glob=glob />

  <div class=`d-flex ${ rec0.itgroup ? 'flex-row justify-content-around align-items-start flex-wrap p-5' : 'flex-column py-5' } ` style=''>

    <if(rec0)>
        <for|value| of=attrs.recs>
          <if(rec0.itgroup)>
            <outIconsGroup guid=value.guid guid_picture=value.guid_picture name=value.name glob=glob />
          </if>
          <else>
            <outIconsGoods guid=value.guid guid_picture=value.guid_picture name=value.name artikul=value.artikul glob=glob  price=[value.price1, value.price2, value.price3]/>
          </else>
        </for>
    </if>
    <else-if(attrs && attrs.recs && attrs.recs.length == 0)>
        <!-- <ahtung descr = 'Просто НЕТ таких данных...'/> -->
        <ahtung descr = 'Загрузка данных...'/>
    </else-if>
    <else-if(attrs && attrs.ahtung_postgre !== "")>
        <ahtung descr = 'При получении данных произошла ошибка:<br/>' + attrs.ahtung_postgre/>
    </else-if>
    <else>
      <greetings name = 'Посетитель'/>
    </else>

</div>
<!-- ////////////////////////////////////////////////// -->
</div>





<macro|{descr}| name='ahtung'>
    <h1 class="display-3 text-center my-auto">
        ${descr}.
    </h1>
</macro>

<macro|{name}| name='greetings'>
  <h1 class="display-3 text-center my-auto">
      Здравствуйте ${name}. Ожидайте получения данных.<br/>Если их долго нет , то это возможно ошибка - зайдите позже или на станционарном компьютере.
  </h1>
</macro>

<!-- src = guid_picture.replace('https://newfurnitura.ru/upload', '/images'); -->
<!-- src = guid_picture.replace('https://newfurnitura.ru/upload', '/img/group'); -->
<macro|{guid, guid_picture, name, glob}| name='outIconsGroup'>
  <div class='d-flex flex-column p-0' style=''>
    <a href="/catalog/" + guid>
      <img
          key = guid
          src = guid_picture.replace('https://newfurnitura.ru/upload', glob.imgPath );
          class = 'mx-4 mt-5 mb-1 img-fluid'
          style = `border: 3px solid ${glob.colorBlueMF}; border-radius: 20px; height: ${whGroup}; width: ${whGroup};`/>
    </a>
    <p class='p-0 text-center text-break ml-4' style=`font-size: 3rem; width: ${whGroup};`>${name}</p>

  </div>
</macro>

<macro|{ guid, guid_picture, name, artikul, price, glob }| name='outIconsGoods'>

  <div class='col-12 row'>

    <img
        key = guid
        src = guid_picture.replace('https://newfurnitura.ru/upload', glob.imgPath );
        class = 'mx-4 mb-3 mt-5 img-fluid col-3'
        style = `border: 3px solid ${glob.colorBlueMF}; border-radius: 20px; height: ${whGood}; width: ${whGood};`/>

    <p  class='col-8 my-auto' style='font-size: 3rem;' >${name}<br/>арт: ${artikul}</p>

  </div>

  <div class='col-12 row'>
    <p  class='col-4 text-center' style='font-size: 3rem;' >розн. $!{glob.signRur}</p>
    <p  class='col-4 text-center' style='font-size: 3rem;' >мелк.опт $!{glob.signRur}</p>
    <p  class='col-4 text-center' style='font-size: 3rem;' >круп.опт $!{glob.signRur}</p>
  </div>
  <div class='col-12 row' style = `border-bottom: 3px solid ${glob.colorBlueMF};`>
    <p  class='col-4 display-4 text-right' >${ price[0] }</p>
    <p  class='col-4 display-4 text-right' >${ price[1] }</p>
    <p  class='col-4 display-4 text-right' >${ price[2] }</p>
  </div>
</macro>

<macro|{name, path, glob}| name='headerName'>

  <div class='btn btn-outline-primary col-12 position-fixed d-flex justify-content-between align-items-center p-0' style='background-color: white; z-index: 1;'>

    <a href='/' class='' style='' >
       <img class='img-fluid' style=`height: ${glob.heightHeader};` src='/img/logoHeaderNum.png' alt="" />
    </a>

    <!-- <button class='p-2' style='font-size: 3rem;' onClick('openModal')>OK</button> -->

    <!-- <a href=`${path}` class='' >
       <h1 key='catalogHeader' class='display-3 pr-3' style='' nowrap><pre>   </pre><span>&#187</span></h1>
    </a> -->
    <searchIcon glob=glob />
  </div>

  <div  key='catalogHeader2' style=`height: 150px; }`/>
</macro>

<macro|{glob}| name='searchIcon'>

<div style='display: flex; flex-direction: row; height: 95px; margin-right: 35px;'>

  <input key='inpArtikul' placeholder="Артикул..." name="artikul" autocomplete="off" type="text"
    style=`width: 45vw; font-size: 3rem; border-color: ${glob.colorBlueMF}; margin-right: 15px; padding-left: 25px;` />

    <button style=`width: 100px; ` on-click('openModal')>
      <svg x="0px" y="0px" width="60px" height="60px" viewBox="1 -2.5 25 25">
       <circle fill="none" stroke='black' stroke-width="2" stroke-miterlimit="10" cx="10.5" cy="7.5" r="6"/>
       <line fill="none" stroke='black' stroke-width="2" stroke-miterlimit="10" x1="20.531" y1="17.531" x2="14.5" y2="11.5"/>
     </svg>
   </button>

</div>

</macro>
